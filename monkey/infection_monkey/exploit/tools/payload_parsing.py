import logging
import textwrap

LOG = logging.getLogger(__name__)


class Payload(object):
    """
    Class for defining and parsing a payload (commands with prefixes/suffixes)
    """

    def __init__(self, command, prefix="", suffix=""):
        """
        :param command: command
        :param prefix: commands prefix
        :param suffix: commands suffix
        """
        self.command = command
        self.prefix = prefix
        self.suffix = suffix

    def get_full_payload(self, command=""):
        if not command:
            command = self.command
        return "{}{}{}".format(self.prefix, command, self.suffix)


class LimitedSizePayload(Payload):
    """
    Class for defining and parsing commands/payloads
    """

    def __init__(self, command, max_length, prefix="", suffix=""):
        """
        :param command: command
        :param max_length: max length that payload(prefix + command + suffix) can have
        :param prefix: commands prefix
        :param suffix: commands suffix
        """
        super(LimitedSizePayload, self).__init__(command, prefix, suffix)
        self.max_length = max_length

    def is_suffix_and_prefix_too_long(self):
        return self.payload_is_too_long(self.suffix + self.prefix)

    def split_into_array_of_smaller_payloads(self):
        if self.is_suffix_and_prefix_too_long():
            LOG.error("Can't split command into smaller sub-commands because commands' prefix and suffix already "
                      "exceeds required length of command.")
            return False
        elif self.command == "":
            return [self.prefix+self.suffix]

        commands = [self.get_full_payload(part)
                    for part
                    in textwrap.wrap(self.command, self.get_max_sub_payload_length())]
        return commands

    def get_max_sub_payload_length(self):
        return self.max_length - len(self.prefix) - len(self.suffix) - 1

    def payload_is_too_long(self, command):
        return len(command) > self.max_length
